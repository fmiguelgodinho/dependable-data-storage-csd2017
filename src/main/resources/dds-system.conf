akka.ssl-config.hostnameVerifierClass = dds.http.ssl.DDSInsecureHostnameVerifier

akka {

  loglevel = warning			# debug/info/warning/error/off
  
  actor {
  
  	provider = remote
  
  	serialize-creators = on
   	serialize-messages = on
   	warn-about-java-serializer-usage = false
    
    guardian-supervisor-strategy = dds.core.BFTSupervisorStrategy
  }
  
  remote {
  
    	enabled-transports = [akka.remote.netty.ssl]
    	
    	netty.ssl {
    	
    	  hostname = "10.171.240.169"
	      port = 2552
	      
	      enable-ssl = true
	      
	      security {
	    
		      key-store = "src/main/resources/certificates/intranet.jks"
		      key-store-password = "changeit"
		      key-password = "changeit"
		      
		      trust-store = "src/main/resources/certificates/intranet.jks"
		      trust-store-password = "changeit"
		 
		      protocol = "TLSv1.2"
		      require-mutual-authentication = on
		      
		      enabled-algorithms = [
					"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
					"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
					"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
					"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
			  ]
		      
		      random-number-generator = "AES128CounterSecureRNG"
		    }
		    
            message-frame-size 	=  30000000b
	        send-buffer-size 	=  30000000b
	        receive-buffer-size =  30000000b
	        maximum-frame-size 	= 30000000b
    	}
    	
    	maximum-payload-bytes = 30000000 bytes
  }
}

server-side-debugging = false
fault-detection-debugging = true

proxy {
	hostname = "10.171.240.169"
	port	 = 443
	
	remote-peers = [
		"10.171.241.202",
		"10.171.241.208"
	]
	
	key-sync {
		enabled 		= true
		warm-up		 	= 5
		interval		= 5
	} 
	
	security {
		key-store = "src/main/resources/certificates/server.jks" 
		key-store-password = "changeit"
		
		ssl-context-protocol = "TLSv1.2"
		enabled-ciphersuites = [
			"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
			"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
			"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
			"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
		]
		enabled-protocols = [
			"TLSv1.2"
		]
		
		mac-signature-secret-key	= "rest2abd"
		mac-signature-digest		= "HmacSHA256"
		nonce-challenge-increment = 1
	}
	
	key-generation-digest = "SHA-512"
	
	intranet-faulty-retry-attempts = 2
	intranet-faulty-retry-backoff = 300
	intranet-request-timeout = 5000
}

replicas {

	supervisor {
		create-supervisor = true
		endpoint = "akka.ssl.tcp://dds-system@10.171.240.169:2552/user/dds-supervisor"
	}
	
	local: [
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.240.169:2552/user/dds-node-3", sentinent = true },
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.240.169:2552/user/dds-node-2", sentinent = false },
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.240.169:2552/user/dds-node-1", sentinent = false }
	]
	
	external: [
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.241.208:2552/user/dds-node-9", sentinent = false },
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.241.208:2552/user/dds-node-8", sentinent = false },
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.241.208:2552/user/dds-node-7", sentinent = false },
		
		
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.241.202:2552/user/dds-node-6", sentinent = true },
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.241.202:2552/user/dds-node-5", sentinent = false },
		{ endpoint = "akka.ssl.tcp://dds-system@10.171.241.202:2552/user/dds-node-4", sentinent = false }
	]
	
	security {
		byz-quorum-size 		= 5
		byz-max-faults			= 2
		mac-signature-digest	= "HmacSHA256"
		
		proactive-recovery {
			warm-up		 		= 5
			interval			= 7
		}
		
		crashed-recovery-timeout = 10000		# millis
		sentinent-awake-timeout  = 5000			
	}
	
	intruder-attacks {
		enable-simulation = true
		nr-of-attacks 	  = 2			# max = 2
		type-of-attacks	  = byzantine	# crash/byzantine
	}
}